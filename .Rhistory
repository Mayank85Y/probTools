library(devtools)
install.packages(c("devtools", "usethis"))
install.packages(c("devtools", "usethis"))
library(devtools)
library(usethis)
R.Version()
library(stats)
library(utils)
library(stats)
use_package("stats")
library(utils)
use_package("utils")
library(utils)
#' @examples
result <- custom_pdf_cdf(1:10)
#' Custom Probability Distribution
#'
#' Computes the PDF, CDF, and generates random samples from a custom distribution.
#'
#' @param x Numeric vector of values.
#' @param alpha Shape parameter (default: 2).
#' @param beta Scale parameter (default: 3).
#' @param n_samples Number of random samples to generate (default: 1000).
#' @return A list with PDF, CDF, and random samples.
#' @examples
#' result <- custom_pdf_cdf(1:10)
#' result$samples
#' @export
custom_pdf_cdf <- function(x, alpha = 2, beta = 3, n_samples = 1000) {
pdf <- alpha * beta * x^(alpha - 1) * exp(-beta * x^alpha)
cdf <- 1 - exp(-beta * x^alpha)
samples <- (-log(runif(n_samples)) / beta)^(1 / alpha)  # Random sampling using inverse transform
return(list(pdf = pdf, cdf = cdf, samples = samples))
}
cusrtom_pdf_cdf(1:10)
custom_pdf_cdf(!:100)
custom_pdf_cdf(1:10)
devtools::load_all(".")
?custom_dis
?fit_gdp
?shannon_entropy
?bayesian_update
devtools::load_all(".")
?bayesian_update
devtools::load_all(".")
devtools::load_all(".")
?order_stat_expectation
?fit_gpd
library(dectools)
library(devtools)
use_vignette("Into_to_probTools", title= "Introduction to inhouseCalc")
install.packages("~/probTools_0.0.0.9000.tar.gz", repos = NULL, type = "source")
usethis::use_vignette("probools")
detach("package:probTools", unload = TRUE)
install.packages("~/probTools_0.0.0.9000.tar.gz", repos = NULL, type = "source")
help(package= "probTools")
help(package= "probTools")
use_testthat()
library(devtools)
use_testthat()
use_test()
rlang::last_trace()
testthat::test_file("tests/testthat/test-custom_dis.R")
library(probTools)
testthat::test_file("tests/testthat/test-custom_dis.R")
testthat::test_file("tests/testthat/test-fit_gpd.R")
testthat::test_file("tests/testthat/test-shannon_entropy.R")
testthat::test_file("tests/testthat/test-bayesian_update.R")
testthat::test_file("tests/testthat/test-order_stat_expectation.R")
testthat::test_file("tests/testthat/test-shannon_entropy.R")
testthat::test_file("tests/testthat/test-fit_gpd.R")
testthat::test_file("tests/testthat/test-custom_dis.R")
testthat::test_file("tests/testthat/test-shannon_entropy.R")
testthat::test_file("tests/testthat/test-shannon_entropy.R")
Error in `expect_compare(">=", act, exp)`: Result of comparison must be a single logical value
testthat::test_file("tests/testthat/test-shannon_entropy.R")
shannon_entropy(c(0.2,0.3,0.5))
$entropy
testthat::test_file("tests/testthat/test-shannon_entropy.R")
testthat::test_file("tests/testthat/test-shannon_entropy.R")
testthat::test_file("tests/testthat/test-shannon_entropy.R")
testthat::test_file("tests/testthat/test-shannon_entropy.R")
testthat::test_file("tests/testthat/test-order_stat_expectation.R")
testthat::test_file("tests/testthat/test-fit_gpd.R")
install.packages("evir")
library(evir)
testthat::test_file("tests/testthat/test-custom_pdf_cdf.R")
testthat::test_file("tests/testthat/test-fit_gpd.R")
testthat::test_file("tests/testthat/test-fit_gpd.R")
library(probTools)
devtools::load_all(".")
install.packages("~/probTools_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/probTools_0.0.0.9000.tar.gz", repos = NULL, type = "source")
remove.packages("probTools")
install.packages("~/probTools_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(probTools)
devtools::check(cran = TRUE)
devtools::check_win_devel()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()  # Ensure documentation is updated
devtools::check()     # Run a full package check
remove.packages("probTools")
install.packages("~/probTools_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/probTools_0.0.0.9000.tar.gz", repos = NULL, type = "source")
devtools::check(cran = TRUE)
devtools::build()
R CMD check --as-cran
R.version
